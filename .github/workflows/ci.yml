name: Helm CI (simple)

on:

  pull_request:
  push:
    branches: [ develop ]
    paths:
      - 'djangoapp-helm-charts/**'
      - 'overlays/**'
      - 'Bootstrap.sh'
      - 'script.sh'
      - '.github/workflows/ci.yml'
      - '!**/*.md'

permissions:
  contents: read
  packages: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  IMAGE_REPO: ghcr.io/alex13-th/devops-app
  IMAGE_TAG: sha-680127a976f28bc44054188346e9442342c11881
  CHART_PATH: ./djangoapp-helm-charts/todoapp-web
  VALUES_CI: ./djangoapp-helm-charts/overlays/ci/values-ci.yaml
  APP_NS: todoapp-web-ns
  APP_DEPLOY: todoapp-deployment
  APP_SVC_NAME: todoapp-web-service
  READY_PATH: /api/health
  READY_PORT: "80"

jobs:
  helm-validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.14.4

      - name: Helm deps
        run: helm dependency update "${CHART_PATH}"

      - name: Package chart
        run: helm package "${CHART_PATH}" -d ./artifacts

      - name: Login to GHCR
        if: github.event_name == 'push'
        run: echo "${{ secrets.GITHUB_TOKEN }}" | helm registry login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push chart to GHCR
        if: github.event_name == 'push'
        run: |
          OWNER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          FILE=$(ls ./artifacts/*.tgz | head -n1)
          echo "Pushing $FILE to oci://ghcr.io/${OWNER_LOWER}/charts"
          helm push "$FILE" oci://ghcr.io/${OWNER_LOWER}/charts

      - name: Helm lint
        run: helm lint "${CHART_PATH}"

      - name: Render chart (base)
        run: helm template test "${CHART_PATH}" >/dev/null

      - name: Render chart (CI values)
        run: helm template test "${CHART_PATH}" -f "${VALUES_CI}" >/dev/null


  e2e-kind:
    runs-on: ubuntu-latest
    needs: helm-validate
    steps:
      - uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: v1.29.2

      - name: Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.14.4

      - name: Create kind cluster
        uses: helm/kind-action@v1
        with:
          cluster_name: helm-ci

      - name: Clean lock & deps
        run: |
          rm -f "${CHART_PATH}/Chart.lock"
          helm dependency update "${CHART_PATH}"

      - name: Create namespace
        run: kubectl create ns "${APP_NS}"

      - name: Pull image (public)
        run: docker pull ${IMAGE_REPO}:${IMAGE_TAG}

      - name: Load image into Kind
        run: kind load docker-image ${IMAGE_REPO}:${IMAGE_TAG} --name helm-ci

      # У CI-оверлеї повинні бути: replicaCount=1, persistence.enabled=false,
      # monitoring.serviceMonitor.enabled=false, monitoring.rules.enabled=false
      - name: Install chart (CI values)
        run: |
          helm upgrade --install todoapp "${CHART_PATH}" \
            -n "${APP_NS}" -f "${VALUES_CI}" \
            --set todoapp.image.repository=${IMAGE_REPO} \
            --set todoapp.image.tag=${IMAGE_TAG} \
            --set todoapp.image.pullPolicy=IfNotPresent \
            --set probes.readiness.path=/api/health \
            --wait --timeout 5m

      - name: Wait for deployment to be Ready
        run: kubectl -n "${APP_NS}" rollout status deploy/${APP_DEPLOY} --timeout=180s

      - name: In-cluster smoke check (/api/ready)
        run: |
          kubectl -n "${APP_NS}" run curl --image=curlimages/curl:8.7.1 --rm --restart=Never -i --quiet -- \
            sh -c "curl -fsS http://${APP_SVC_NAME}.${APP_NS}.svc:${READY_PORT}${READY_PATH}"

      - name: Show diagnostics on failure
        if: failure()
        run: |
          kubectl get pods -A -o wide || true
          kubectl -n "${APP_NS}" describe deploy/${APP_DEPLOY} || true
          kubectl -n "${APP_NS}" logs -l app=todoapp --tail=200 --all-containers || true

      - name: Quick status
        if: failure()
        run: |
          kubectl -n "${APP_NS}" get deploy,rs,pods,svc,endpoints -o wide
          kubectl -n "${APP_NS}" get events --sort-by=.lastTimestamp | tail -n 100 || true

      - name: Describe + logs (first app pod)
        if: failure()
        run: |
          POD=$(kubectl -n "${APP_NS}" get pod -l app=todoapp-web -o name | head -n1 || true)
          if [ -n "$POD" ]; then
            kubectl -n "${APP_NS}" describe "$POD" | sed -n '/Events/,$p' || true
            kubectl -n "${APP_NS}" logs "$POD" --all-containers --tail=300 || true
          fi

      - name: Helm status (app)
        if: failure()
        run: helm get status todoapp -n "${APP_NS}" || true

